/* Generated by Emscripten from neural_network.cpp */
var NeuralNetworkModule = (function() {
    var Module = {};
    Module['locateFile'] = function(path) {
        return '/static/' + path;
    };
    return new Promise((resolve, reject) => {
        try {
            Module['onRuntimeInitialized'] = function() {
                try {
                    resolve({
                        _create_network: Module.cwrap('create_network', null, []),
                        _destroy_network: Module.cwrap('destroy_network', null, []),
                        _predict: Module.cwrap('predict', 'number', ['number']),
                        _free_result: Module.cwrap('free_result', null, ['number'])
                    });
                } catch (err) {
                    reject(new Error('Failed to wrap Emscripten functions: ' + err.message));
                }
            };
            Module['instantiateWasm'] = function(imports, successCallback) {
                fetch('/static/neural_network.wasm')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to fetch /static/neural_network.wasm: ${response.statusText}`);
                        }
                        return response.arrayBuffer();
                    })
                    .then(buffer => WebAssembly.instantiate(buffer, imports))
                    .then(instance => successCallback(instance))
                    .catch(err => reject(new Error('Failed to instantiate WASM: ' + err.message)));
            };
            // Load Emscripten runtime (simulated for fallback)
            setTimeout(() => {
                Module['onRuntimeInitialized']();
            }, 100);
        } catch (err) {
            reject(new Error('NeuralNetworkModule initialization failed: ' + err.message));
        }
    });
})();
