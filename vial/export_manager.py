from datetime import datetime
from vial_manager import VialManager
from webxos_wallet import WebXOSWallet
import uuid
import logging

logger = logging.getLogger(__name__)

class ExportManager:
    def __init__(self, vial_manager: VialManager, wallet: WebXOSWallet):
        self.vial_manager = vial_manager
        self.wallet = wallet

    def export_to_markdown(self, token: str, network_id: str) -> str:
        try:
            vials = self.vial_manager.get_vials()
            session = {"start_time": datetime.utcnow().isoformat(), "address": str(uuid.uuid4())}
            markdown = f"""# WebXOS Vial and Wallet Export

## Agentic Network
- Network ID: {network_id}
- Session Start: {session["start_time"]}
- Session Duration: {((datetime.utcnow() - datetime.fromisoformat(session["start_time"])).total_seconds()):.2f} seconds
- WEBXOS Tokenization Tag: {token}

## Wallet
- Wallet Key: {token}
- Session Balance: {self.wallet.get_balance(session["address"]):.4f} $WEBXOS
- Address: {session["address"]}

## Vials
"""
            for vial in vials.values():
                markdown += f"""# Vial Agent: {vial["id"]}
- Status: {vial["status"]}
- Language: {"Python" if vial["is_python"] else "JavaScript"}
- Code Length: {vial["code_length"]} bytes
- $WEBXOS Hash: {vial["webxos_hash"]}
- Wallet Balance: {vial["wallet"]["balance"]:.4f} $WEBXOS
- Wallet Address: {vial["wallet"]["address"]}
- Tasks: {', '.join(vial["tasks"]) or 'none'}

```{"python" if vial["is_python"] else "javascript"}
{vial["code"]}
```

---
"""
            markdown += """## Instructions
- **Reuse**: Import this .md file via the "Upload" button in Vial MCP Controller to resume training.
- **Extend**: Modify agent code in external projects, then reimport.
- **Cash Out**: $WEBXOS balance is tied to the wallet address for future Stripe integration.

Generated by Vial MCP Controller"""
            logger.info(f"Exported markdown for network: {network_id}")
            return markdown
        except Exception as e:
            logger.error(f"Export markdown error: {str(e)}")
            with open("errorlog.md", "a") as f:
                f.write(f"- **[2025-08-11T00:44:00Z]** Export markdown error: {str(e)}\n")
            raise
