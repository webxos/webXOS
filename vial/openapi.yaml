openapi: 3.0.3
info:
  title: Vial MCP Controller API
  version: 1.0.0
  description: REST API for Vial MCP Controller with agent discovery and AI model integration
servers:
  - url: http://localhost:8080/mcp
paths:
  /auth:
    post:
      summary: Authenticate and obtain JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
                agentId: { type: string, pattern: "^agent_[0-9a-f]{6}$" }
              required: [token]
      responses:
        '200': { description: Authentication successful, returns JWT }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /health:
    get:
      summary: Check server health
      security:
        - BearerAuth: []
      responses:
        '200': { description: Server is healthy }
        '401': { description: Unauthorized }
  /vial:
    post:
      summary: Create a new vial
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string, pattern: "^vial_[0-9a-f]{6}$" }
                code: { type: object, properties: { js: { type: string } }, required: [js] }
                training: { type: object, properties: { model: { type: string }, epochs: { type: integer } }, required: [model, epochs] }
                agentId: { type: string, pattern: "^agent_[0-9a-f]{6}$" }
              required: [id, code, training]
      responses:
        '200': { description: Vial created }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /vials:
    get:
      summary: List all vials
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of vials }
        '401': { description: Unauthorized }
  /train:
    post:
      summary: Train a vial
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string, pattern: "^vial_[0-9a-f]{6}$" }
                input: { type: string }
                agentId: { type: string, pattern: "^agent_[0-9a-f]{6}$" }
              required: [id, input]
      responses:
        '200': { description: Training successful }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /destroy:
    post:
      summary: Destroy all vials
      security:
        - BearerAuth: []
      responses:
        '200': { description: Vials destroyed }
        '401': { description: Unauthorized }
  /diagnostics:
    get:
      summary: Run diagnostics
      security:
        - BearerAuth: []
      responses:
        '200': { description: Diagnostics report }
        '401': { description: Unauthorized }
  /log-sync:
    post:
      summary: Sync logs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                log: { type: string }
              required: [log]
      responses:
        '200': { description: Log synced }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /register:
    post:
      summary: Register an agent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string, pattern: "^(agent|ai)_[0-9a-f]{6}$" }
                name: { type: string }
                endpoints: { type: array, items: { type: object, properties: { url: { type: string, format: uri }, method: { type: string, enum: [GET, POST, PUT, DELETE] } }, required: [url, method] } }
                capabilities: { type: object, properties: { type: { type: string }, config: { type: object } }, required: [type] }
              required: [id, name, endpoints, capabilities]
      responses:
        '200': { description: Agent registered }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /agents:
    get:
      summary: List active agents
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of agents }
        '401': { description: Unauthorized }
  /agent/ping:
    post:
      summary: Ping an agent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentId: { type: string, pattern: "^(agent|ai)_[0-9a-f]{6}$" }
              required: [agentId]
      responses:
        '200': { description: Ping successful }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /agent/config:
    post:
      summary: Configure an agent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentId: { type: string, pattern: "^(agent|ai)_[0-9a-f]{6}$" }
                config: { type: object }
              required: [agentId, config]
      responses:
        '200': { description: Configuration updated }
        '400': { description: Invalid input }
        '401': { description: Unauthorized }
  /discover:
    get:
      summary: Discover agents and AI models
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of discovered agents }
        '401': { description: Unauthorized }
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Rebuild Instructions: Place in /vial/. Serve with `npm install serve` and `npx serve -s .` to view API docs. Ensure used by server.js and agent_manager.js. Run Troubleshoot in vial.html to check for errors.
