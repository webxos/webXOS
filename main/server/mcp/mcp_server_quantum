import logging,sqlite3,json
from fastapi import HTTPException,Depends
from pydantic import BaseModel
from .quantum_simulator import QuantumSimulator
from .mcp_auth_server import MCPAuthServer

logger=logging.getLogger(__name__)

class QuantumRequest(BaseModel):
    vial_id:str
    prompt:str
    wallet_id:str

class MCPQuantumHandler:
    """Handles quantum processing tasks with wallet verification."""
    def __init__(self):
        """Initialize MCPQuantumHandler with QuantumSimulator."""
        self.quantum_simulator=QuantumSimulator()
        self.auth_server=MCPAuthServer()
        logger.info("MCPQuantumHandler initialized")

    async def process_quantum(self,request:QuantumRequest,access_token:str=Depends(lambda x: x)) -> dict:
        """Process a quantum task for a vial.

        Args:
            request (QuantumRequest): Quantum request with vial_id, prompt, and wallet_id.
            access_token (str): OAuth access token.

        Returns:
            dict: Quantum state result.

        Raises:
            HTTPException: If quantum processing or token verification fails.
        """
        try:
            if not await self.auth_server.verify_oauth_token(access_token,request.wallet_id):
                logger.warning(f"Invalid token for wallet {request.wallet_id}")
                raise HTTPException(status_code=401,detail="Invalid access token")
            result=await self.quantum_simulator.process_quantum_link(request.vial_id,request.prompt)
            with sqlite3.connect("/app/vial_mcp.db") as conn:
                cursor=conn.cursor()
                cursor.execute("INSERT OR REPLACE INTO quantum_states (vial_id,state,wallet_id,timestamp) VALUES (?,?,?,?)",
                              (request.vial_id,json.dumps(result),request.wallet_id,datetime.now().isoformat()))
                conn.commit()
            logger.info(f"Quantum task processed for vial {request.vial_id} by wallet {request.wallet_id}")
            return {"status":"success","quantum_state":result,"wallet_id":request.wallet_id}
        except Exception as e:
            logger.error(f"Quantum task failed for wallet {request.wallet_id}: {str(e)}")
            raise HTTPException(status_code=500,detail=f"Quantum task failed: {str(e)}")
