WebXOS Searchbot Repository Layout
=================================

Repository: https://github.com/webxos/webxos
Website: https://webxos.netlify.app
Description: A decentralized, PWA-based searchbot with AI-driven agents, using Fuse.js, Gun.js, and Compromise for real-time search, NLP, and agent coordination.

Directory Structure
-------------------
webxos/
├── index.html
├── chatbot/
│   ├── static/
│   │   ├── chatbot.html
│   │   ├── style.css
│   │   ├── agent1.js
│   │   ├── agent2.js
│   │   ├── agent3.js
│   │   ├── agent4.js
│   │   ├── agentic.js
│   │   ├── neurots.js
│   │   ├── sync.js
│   │   ├── nlp.js
│   │   ├── service-worker.js
│   │   ├── site_index.json
│   │   ├── tree.txt
│   │   ├── fuse.min.js
├── README.md
└── package.json

File Descriptions
-----------------
- index.html: Entry point for the WebXOS site, linking to chatbot.html.
- chatbot/static/chatbot.html: Main interface with chatbox, neural canvas, Search/Clear buttons, command parsing (/help, /agent1-4, /agentic, /debug), and error handling.
- style.css: Neon-green, cyberpunk UI with mobile-specific canvas, scrolling messages, and button styling.
- agent1.js–agent4.js: Individual agent search logic using Fuse.js, enhanced with Gun.js (syncing) and Compromise (NLP).
- agentic.js: Combines all agents for /agentic mode with Gun.js for real-time coordination, focusing on WebXOS topics.
- neurots.js: Renders neural dot patterns (green, cyan, magenta, blue; circle, square, triangle, star for /agentic), adjusted for mobile.
- sync.js: Handles Gun.js for real-time result syncing, defines initGun and syncResults.
- nlp.js: Custom utilities for Compromise to process queries and detect WebXOS relevance.
- service-worker.js: Caches assets for offline PWA support with fallback for site_index.json.
- site_index.json: JSON index of WebXOS content for search.
- tree.txt: This file, documenting the repository, setup, and troubleshooting.
- fuse.min.js: Minified Fuse.js library for search functionality.
- README.md: General project overview and contribution guide.
- package.json: Metadata for Node.js (optional, used for local dev).

Installation Instructions
------------------------
### Option 1: Deploy on Netlify
1. Fork or clone the repository: `git clone https://github.com/webxos/webxos.git`
2. Ensure `chatbot/static/site_index.json`, `sync.js`, `nlp.js`, `fuse.min.js` exist and are valid.
3. Push to your GitHub repository.
4. Connect to Netlify:
   - Log in to Netlify (https://app.netlify.com).
   - Select "New site from Git" and link your repository.
   - Set the build command to empty and publish directory to `webxos`.
   - Deploy the site.
5. Verify files:
   - `https://your-site.netlify.app/chatbot/static/site_index.json`
   - `https://your-site.netlify.app/chatbot/static/sync.js`
   - `https://your-site.netlify.app/chatbot/static/nlp.js`
   - `https://your-site.netlify.app/chatbot/static/fuse.min.js`
6. Ensure HTTPS is enabled (automatic on Netlify) for PWA and Gun.js functionality.
7. Access the searchbot at `https://your-site.netlify.app/chatbot/static/chatbot.html`.

### Option 2: Local Development
1. Clone the repository: `git clone https://github.com/webxos/webxos.git`
2. Navigate to the project: `cd webxos`
3. Ensure `chatbot/static/site_index.json`, `sync.js`, `nlp.js`, `fuse.min.js` exist.
4. (Optional) Install Node.js and npm for local server:
   - `npm install`
   - `npm install -g serve`
   - `serve -s .`
5. Open `http://localhost:5000/chatbot/static/chatbot.html` in a browser.
6. Verify files:
   - `http://localhost:5000/chatbot/static/site_index.json`
   - `http://localhost:5000/chatbot/static/sync.js`
   - `http://localhost:5000/chatbot/static/nlp.js`
   - `http://localhost:5000/chatbot/static/fuse.min.js`

### Library Dependencies (CDN-Based)
- Fuse.js (v6): https://cdn.jsdelivr.net/npm/fuse.js@6/dist/fuse.min.js
- Gun.js (v0.2020): https://cdn.jsdelivr.net/npm/gun@0.2020/gun.min.js
- Compromise (v14): https://cdn.jsdelivr.net/npm/compromise@14/builds/compromise.min.js
- Download manually if needed:
  - Fuse.js: https://github.com/krisk/Fuse
  - Gun.js: https://github.com/amark/gun
  - Compromise: https://github.com/spencermountain/compromise

### Usage
- Open the searchbot in a browser.
- On load, a help menu displays commands: /help, /clear, /stats, /version, /agent1-4, /agentic, /debug.
- Use /agentic to activate unified mode, combining all agents with Gun.js for real-time "Agentic:" responses and a four-color, four-shape neural visualization.
- Use /clear to reset the chatbox and neural dots.
- Queries must relate to WebXOS (e.g., decentralized apps, PWA, WebGL); others are politely declined.
- On mobile, neural dots/shapes appear above the chatbox, around the WebXOS logo.

### Troubleshooting
#### HTTP 404 for site_index.json
If you see `Error: Failed to load index.: HTTP 404:` or `All fetch attempts failed`, follow these steps:
1. **Verify File Existence**:
   - Check that `webxos/chatbot/static/site_index.json` exists in your GitHub repository (`https://github.com/webxos/webxos`).
   - Example content: `{"site_index": [{"text": {"content": "WebXOS is a decentralized platform"}, "path": "/index.html", "source": "WebXOS"}]}`
   - On Netlify, confirm at `https://webxos.netlify.app/chatbot/static/site_index.json`.
2. **Check Netlify Deployment**:
   - In Netlify (https://app.netlify.com), go to "Deploys" and verify `site_index.json`.
   - Ensure publish directory is `webxos` in `netlify.toml`:
     ```toml
     [build]
       publish = "webxos"
       command = ""
     ```
   - Redeploy:
     ```bash
     git add chatbot/static/site_index.json
     git commit -m "Add site_index.json"
     git push
     ```
3. **Test Locally**:
   - Clone and run `serve -s .`, access `http://localhost:5000/chatbot/static/site_index.json`.
4. **Inspect Network Response**:
   - In DevTools (F12) > Network tab, reload `https://webxos.netlify.app/chatbot/static/chatbot.html`.
   - Check `/chatbot/static/site_index.json` requests.

#### Error: initGun or syncResults not defined
If you see `Error: initGun not defined` or `Error: syncResults not defined`:
1. **Verify sync.js**:
   - Ensure `webxos/chatbot/static/sync.js` exists and exports `initGun`, `syncResults`.
2. **Check Script Loading**:
   - In DevTools > Network tab, verify `https://webxos.netlify.app/chatbot/static/sync.js` (200 status).
   - Redeploy:
     ```bash
     git add chatbot/static/sync.js
     git commit -m "Add sync.js"
     git push
     ```

#### Error: setAgentsActive is not defined
If you see `Error: setAgentsActive is not defined`:
1. **Update chatbot.html**:
   - Ensure `setAgentsActive` is defined (see updated `chatbot.html`).
2. **Redeploy**:
   - Update `chatbot.html`:
     ```bash
     git add chatbot/static/chatbot.html
     git commit -m "Add setAgentsActive"
     git push
     ```

#### Error: Failed to load fuse.min.js or nlp.js
If you see `Error: Failed to load fuse.min.js` or `Error: Failed to load nlp.js`:
1. **Verify Files**:
   - Ensure `webxos/chatbot/static/fuse.min.js` and `nlp.js` exist.
   - Download `fuse.min.js` from `https://cdn.jsdelivr.net/npm/fuse.js@6/dist/fuse.min.js` if needed.
2. **Redeploy**:
   - Add files:
     ```bash
     git add chatbot/static/fuse.min.js chatbot/static/nlp.js
     git commit -m "Add fuse.min.js and nlp.js"
     git push
     ```

#### Unable to Type in Console
If you cannot type in the input field:
1. **Check #userInput**:
   - In DevTools, inspect `<input id="userInput">` for `disabled` or CSS issues.
   - Ensure `style.css` has:
     ```css
     #userInput { pointer-events: auto; }
     ```
2. **Test Event Listeners**:
   - Run: `document.getElementById('userInput').focus()`
3. **Redeploy**:
   - Update `chatbot.html` and `style.css`.

### Notes
- All files are browser-based, no server-side dependencies.
- Gun.js data is public; encrypt sensitive data client-side.
- PWA requires HTTPS (automatic on Netlify).
- If issues persist, share `/debug` output, Netlify logs, or Network tab screenshot.
